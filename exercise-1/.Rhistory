# Load the httr and jsonlite libraries for accessing data
# You can also load `dplyr` if you wish to use it
library(httr)
library(jsonlite)
library(dplyr)
# Load the httr and jsonlite libraries for accessing data
# You can also load `dplyr` if you wish to use it
install.packages(httr)
# Load the httr and jsonlite libraries for accessing data
# You can also load `dplyr` if you wish to use it
install.packages("httr")
install.packages("httr")
library(httr)
install.packages("jsonlite")
library(jsonlite)
# Create a variable for the API's base URI (https://api.github.com)
base_uri <- https://api.github.com
# Create a variable for the API's base URI (https://api.github.com)
base_uri <- "https://api.github.com"
# Under the "Repositories" category of the API,
# find the endpoint that will list repos in an organization. Then,
# Create a variable `resource` that stores the endpoint for the "info201"
# organization repos (this is the PATH to the resource of interest).
# (FYI: this is where we keep the book code and master exercise sets!)
resource <- "orgs/info201/repos"
# Send a GET request to this endpoint (the `base_uri`` followed by `resource`)
body <- GET(paste0(base_uri, resource))
# Send a GET request to this endpoint (the `base_uri`` followed by `resource`)
response <- GET(paste0(base_uri, resource))
# Under the "Repositories" category of the API,
# find the endpoint that will list repos in an organization. Then,
# Create a variable `resource` that stores the endpoint for the "info201"
# organization repos (this is the PATH to the resource of interest).
# (FYI: this is where we keep the book code and master exercise sets!)
resource <- "/orgs/info201/repos"
# Send a GET request to this endpoint (the `base_uri`` followed by `resource`)
response <- GET(paste0(base_uri, resource))
View(response)
# Extract the "text" of the response usin the `content` function
body <- content(response, "text")
# Convert the body from JSON into a data frame
info <- fromJSON(body)
View(info)
View(info)
# How many (public) repositories does the organization have?
nrow(info)
# Use a "Search" endpoint to search for repositories about "graphics"
# (bonus: limit language to only "R" -- which requires a different syntax)
# (hint: https://developer.github.com/v3/search/#search-repositories)
# Reassign the `resource` variable to refer to the appropriate resource.
resource <- "/search/repositories"
# You will need to specify some query parameters. Create a `query_params` list
# variable that specifies an appropriate key and value for the search term and
# the language
query_params <- list(q = "graphics")
# You will need to specify some query parameters. Create a `query_params` list
# variable that specifies an appropriate key and value for the search term and
# the language
query_params <- list(q = "graphics+language:R")
# Send a GET request to this endpoint--including your params list as the `query`
response <- GET(paste0(base_uri, resource))
# Send a GET request to this endpoint--including your params list as the `query`
response <- GET(paste0(base_uri, resource), query = query_params)
View(query_params)
# Extract the response body and convert it from JSON.
body <- content(response, "text")
results <- fromJSON(body)
View(response)
View(results)
View(response)
View(response)
View(results)
View(results)
# How many search repos did your search find? (Hint: check the list names)
results$total_count
View(query_params)
View(results)
View(results)
# What are the full names of the top 5 results?
top_five <- results$items$full_name
# What are the full names of the top 5 results?
top_five <- results$items$full_name[1:5]
# Send a GET request to this endpoint (the `base_uri`` followed by `resource`)
response <- GET(paste(base_uri, resource))
# Create a variable for the API's base URI (https://api.github.com)
base_uri <- "https://api.github.com"
# Under the "Repositories" category of the API,
# find the endpoint that will list repos in an organization. Then,
# Create a variable `resource` that stores the endpoint for the "info201"
# organization repos (this is the PATH to the resource of interest).
# (FYI: this is where we keep the book code and master exercise sets!)
resource <- "/orgs/info201/repos"
# Send a GET request to this endpoint (the `base_uri`` followed by `resource`)
response <- GET(paste(base_uri, resource))
# Create a variable for the API's base URI (https://api.github.com)
base_uri <- "https://api.github.com"
# Under the "Repositories" category of the API,
# find the endpoint that will list repos in an organization. Then,
# Create a variable `resource` that stores the endpoint for the "info201"
# organization repos (this is the PATH to the resource of interest).
# (FYI: this is where we keep the book code and master exercise sets!)
resource <- "/orgs/info201/repos"
# Send a GET request to this endpoint (the `base_uri`` followed by `resource`)
response <- GET(paste0(base_uri, resource))
# Extract the "text" of the response usin the `content` function
body <- content(response, "text")
# Convert the body from JSON into a data frame
info <- fromJSON(body)
# How many (public) repositories does the organization have?
nrow(info)
# Use a "Search" endpoint to search for repositories about "graphics"
# (bonus: limit language to only "R" -- which requires a different syntax)
# (hint: https://developer.github.com/v3/search/#search-repositories)
# Reassign the `resource` variable to refer to the appropriate resource.
resource <- "/search/repositories"
# You will need to specify some query parameters. Create a `query_params` list
# variable that specifies an appropriate key and value for the search term and
# the language
query_params <- list(q = "graphics+language:R")
# Send a GET request to this endpoint--including your params list as the `query`
response <- GET(paste0(base_uri, resource), query = query_params)
# Extract the response body and convert it from JSON.
body <- content(response, "text")
results <- fromJSON(body)
# How many search repos did your search find? (Hint: check the list names)
results$total_count
# What are the full names of the top 5 results?
top_five <- results$items$full_name[1:5]
